version: 2.1

orbs:
  node: circleci/node@4.1
  slack: circleci/slack@4.10.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      id:
        type: string
    steps:
      - run:
          name: Destroy environments backend
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.id >>
          when: on_fail
      - run:
          name: Destroy environments frontend
          command: |
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.id >>
          when: on_fail

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      id: 
        type: string
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl --insecure https://kvdb.io/GhU1pwEADcAsznLuaxsast/migration_${CIRCLE_WORKFLOW_ID:0:7})
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - slack/notify:
          channel:
          event: fail
          template: basic_fail_1
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - slack/notify:
          channel:
          event: fail
          template: basic_fail_1
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-test]
      - run:
          name: Run frontend test
          command: |
            cd frontend
            npm install
            npm run test
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-test]
      - run:
          name: Run backend test
          command: |
            cd backend
            npm install
            npm run test
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-scan]
      - run:
          name: analyse frontend
          command: |
            cd frontend
            npm install
            npm audit fix --force
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-scan]
      - run:
          name: analyse backend
          command: |
            cd backend
            npm install
            npm audit fix --force
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure backend infrastructure exists
          command: |
            yum install -y tar gzip

            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: Ensure frontend infrastructure exist
          command: |

            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml  \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
            --filter "Name=instance-state-name,Values=running" \
            --query "Reservations[*].Instances[*].[PublicIpAddress]" \
            --output text >> ~/project/.circleci/ansible/inventory.txt
            cat ~/project/.circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
          id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          id: "${CIRCLE_WORKFLOW_ID:0:7}"
  configure-infrastructure:
    docker:
      - image: python:3.10-alpine3.16
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["c7:eb:b2:c2:74:5d:25:fe:8c:87:70:52:00:9c:22:85"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            apk add --update --no-cache tar gzip nodejs npm aws-cli curl
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment:
          id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          id: "${CIRCLE_WORKFLOW_ID:0:7}"
  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: install awscli
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Run migrations
          command: |
            cd backend
            npm run migrations:revert
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to kvdb
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              echo "Migration completed successfully!"
              curl -k https://kvdb.io/GhU1pwEADcAsznLuaxsast/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d 'successful' 
            else
              echo "Migration failed!"
              curl -k https://kvdb.io/GhU1pwEADcAsznLuaxsast/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d 'failed' 
            return 1
            fi
      - destroy-environment:
          id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          id: "${CIRCLE_WORKFLOW_ID:0:7}"
  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies (aws)
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:project,Values=udapeople" --output text) \
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment:
          id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          id: "${CIRCLE_WORKFLOW_ID:0:7}"
  deploy-backend:
    docker:
      - image: python:3.10-alpine3.16
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["c7:eb:b2:c2:74:5d:25:fe:8c:87:70:52:00:9c:22:85"]
      - attach_workspace:
            at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            ansible --version
            apk add --update --no-cache tar gzip openssh nodejs npm curl
            pip install awscli
            aws --version
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            mkdir -p ~/project/.circleci/ansible/roles/deploy/files/
            mv artifact.tar.gz .circleci/ansible/roles/deploy/files/artifact.tar.gz
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is ------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment:
          id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          id: "${CIRCLE_WORKFLOW_ID:0:7}"
  smoke-test:
    docker:
      - image: python:3.10-alpine3.16
    steps:
      - checkout
      - run: 
          name: wait for server
          command: sleep 90
      - run:
          name: Install dependencies
          working_directory: /tmp
          command: |
            apk add --update curl
            pip install awscli
            pip install nodejs
            pip install npm
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
                # Change this to 0 after the job fails
              return 0
            else
              return 1
            fi
      - run:
          name: Backend smoke test.
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --query "Reservations[*].Instances[*].PublicIpAddress" \
              --filters "Name=tag:project,Values=udapeople" \
              --output text)            
            echo $BACKEND_IP
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
              return 0
            else
              return 1
            fi
      - destroy-environment:
          id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          id: "${CIRCLE_WORKFLOW_ID:0:7}"
  cloudfront-update:
    docker: 
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Update cloudfront distribution
          command: |
            export OldWorkflowID=$(aws cloudformation \
                    list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                    --no-paginate --output text)

            echo "$OldWorkflowID:10:7"

            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack \
            --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople

            curl -k https://kvdb.io/GhU1pwEADcAsznLuaxsast/udapeople -d "$OldWorkflowID:10:7"
      - destroy-environment:
          id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          id: "${CIRCLE_WORKFLOW_ID:0:7}"
  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: 
          name: Cleanup old stack(s) & s3
          command: |
            OldWorkflowID=$(curl --insecure https://kvdb.io/GhU1pwEADcAsznLuaxsast/udapeople)
            CurrentWorkflowID=${CIRCLE_WORKFLOW_ID:0:7}

            if [[ "$CurrentWorkflowID" != "$OldWorkflowID" ]]
            then 
              echo current workflow id , old workflow id
              echo ${CIRCLE_WORKFLOW_ID:0:7} , ${OldWorkflowID:0:7}
              echo "deleting old version"
              
              aws s3 rm "s3://udapeople-${OldWorkflowID:}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
            else
              echo "this stack is current, no previous"
            fi
      # - destroy-environment:
      #     id: "${CIRCLE_WORKFLOW_ID:0:7}"
      # - revert-migrations:
      #     id: "${CIRCLE_WORKFLOW_ID:0:7}" 
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]

          
